#+TITLE: Emacs
#+AUTHOR: Gabriele Rastello

#+BEGIN_QUOTE
This is my Emacs. There are many like it, but this one is mine.
#+END_QUOTE

I've build countless Emacs(es) configurations from scratch, this is the latest one. Heavily inspired by [[https://github.com/snackon/Witchmacs][Witchmacs]] (I've shamelessly copied the org-file layout and a bunch of packages (and maybe even descriptions of packages)) but of course way more tailored to my needs (indeed this is not a configuration for "public use" like Witchmacs is). I even use the Witchmacs theme (with slight modifications).

Works best with some non-intrusive window manager (key-wise) so you may have to adjust some of the window manager's key combinations in order to use this configuration as-is.

* Quality of Life
Let's face it: some things of default Emacs are just annoying. Here we try to fix some and add other little (but big) things.

** Backups
I have having backup files all over my directories, but it also happens that sometimes I'm stupid enough to delete some very important non version-controlled file, so I like backups in the end. Just put them in a dedicated folder.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/emacs-backups"))
	backup-by-copying      t
	delete-old-versions    t
	kept-new-versions      10
	kept-old-versions      3)
#+END_SRC

** Conservative scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Disable the bell
That thing is annoying as few things in this world can be.
#+BEGIN_SRC emacs-lisp
  (setq ringbell-function 'ignore)
#+END_SRC

** Disable the default startup buffer
Nothing is more comfortable that the good old =*scratch*=.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Disable useless GUI
You're not 3yo anymore.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Parenthesis
It helps to be able to quickly type them and to be able to tell immediately where matching pairs are located.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)

  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      ))
  (electric-pair-mode t)
#+END_SRC

** Sane buffer killing
I don't kill buffers all the time, but when I do I always kill the current buffer and I want it dead as fast as possible. I'll regret my actions later.
#+BEGIN_SRC emacs-lisp
  (defun murder-current-buffer ()
    "directly kill the current buffer"
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") #'murder-current-buffer)
#+END_SRC

** Sane window splitting
If I decide that I want a new window, I want my point there.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    "split current window horizontally and move the cursor in it"
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    "split current window vertically and move the cursor in it"
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** yes-or-no to y-or-n
This is probably the most annoying thing of all.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Packages
This is why you use Emacs.

** =abbrev-mode=
I used yasnippet for some time and now I fancy a change. =abbrev-mode= is quite cool but it isn't flexible enough; combining it with =skeleton-mode= is good but I wasn't able to get rid of some annoying behavior (you know those little things that aren't really a big deal but make you go insane? That.). In the end the solution I've found is quite simple: using elisp functions instead of skeletons. It is a little more painful to create new snippets, but it makes things as customizable as they can get.

#+BEGIN_SRC emacs-lisp
  (setq save-abbrevs nil)
#+END_SRC

*** General snippets
Snippets that might be needed in more modes.
#+BEGIN_SRC emacs-lisp
  (defun snippet/math-environment ()
    (interactive)
    (insert "\\(\\)")
    (backward-char 2))
#+END_SRC

*** Mode-unique snippets and abbrev tables
Specific snippets for various modes and purposes and abbrev tables for them.

**** Latex
#+BEGIN_SRC emacs-lisp
  (defun snippet/latex/environment ()
    "Ask for an environment name and insert it."
    (interactive)
    (let ((name (read-string "Environment name: "))
	  (start-position (point)))
      (insert "\\begin{" name "}\n\n\\end{" name "}")
      (indent-region start-position (point))
      (previous-line)
      (indent-for-tab-command)))

  (defun snippet/latex/ar ()
    "Snippet for tikzcd's `\ar' macro."
    (interactive)
    (insert "\\ar[, \"\"]")
    (backward-char 5))

  (define-abbrev-table 'latex-mode-abbrev-table
    '(("m"  "" snippet/math-environment)
      ("e"  "" snippet/latex/environment)
      ("ar" "" snippet/latex/ar)))
#+END_SRC

**** Org-mode
#+BEGIN_SRC emacs-lisp
  (define-abbrev-table 'org-mode-abbrev-table
    '(("m" "" snippet/math-environment)))
#+END_SRC

**** Lisp
#+BEGIN_SRC emacs-lisp
  (defun snippet/lisp/defun (&optional interactive)
    "Insert a function definition."
    (interactive)
    (let ((name (read-string "Function name: "))
	  (start-position (point)))
      (insert "(defun " name " ()\n\"\""
	      (if interactive "\n(interactive)" "")
	      ")")

      ;; Fix indentation and reposition the cursor. 
      (indent-region start-position (point))
      (move-end-of-line (if interactive -1 0))
      (backward-char 1)))

  (defun snippet/lisp/defun-interactive ()
    "Insert an interctive function."
    (interactive)
    (funcall 'snippet/lisp/defun 'interactive))

  (define-abbrev-table 'emacs-lisp-mode-abbrev-table
    '(("f"  "" snippet/lisp/defun)
      ("fi" "" snippet/lisp/defun-interactive)))
#+END_SRC

** =async=
Use asynchronous processes when possible.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)
#+END_SRC

** =auto-package-update=
Keep your packages updated and remove some of the garbage that you'll end up creating.
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

** =avy=
It is great.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-all-windows nil)
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** =company-mode=
Completion is so useful.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "SPC") #'(lambda () (interactive)
						   (company-abort)
						   (insert " ")))

    (add-hook 'prog-mode-hook                #'company-mode)
    (add-hook 'LaTeX-mode-hook               #'company-mode)
    (add-hook 'haskell-interactive-mode-hook #'company-mode))
#+END_SRC

** =dired=
The Emacs file manager.
#+BEGIN_SRC emacs-lisp
  (require 'dired)
#+END_SRC

Some aesthetic refinement of dired.
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-lh")
  (add-hook 'dired-mode-hook (lambda ()
			       (hl-line-mode 1)
			       (toggle-truncate-lines)
			       (show-paren-mode 0)))
#+END_SRC

Toggle hidden files.
#+BEGIN_SRC emacs-lisp
  (defun dired-toggle-hidden-files ()
    "toggle hidden files visibility"
    (interactive)

    ;; Set ls switches accordigly.
    (if (string= dired-listing-switches "-lh")
	(setq dired-listing-switches "-lha")
      (setq dired-listing-switches "-lh"))

    ;; Kill current buffer and re-open the directory
    (let ((current-directory dired-directory))
      (kill-buffer (current-buffer))
      (dired current-directory)))
  (define-key dired-mode-map (kbd ".") #'dired-toggle-hidden-files)
#+END_SRC

** =elfeed=
It's the best feed readed for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    (load-file "~/.emacs.d/feeds.el") ;; A man is allowed to have its secrets

    (defun elfeed-and-update ()
      "Launch elfeed and update"
      (interactive)
      (elfeed)
      (elfeed-update))

    ;; Youtube streaming.
    (defun elfeed-youtube-stream ()
      "Stream a youtube (probably even other site's) video in mpv."
      (interactive)
      (let* ((entry (elfeed-search-selected :single))
	     (link  (elfeed-entry-link entry)))
	(start-process "elfeed youtube streaming" nil
		       "mpv" link
		       "--ytdl-format=bestvideo[height<=?720]+bestaudio/best")))

    ;; Elfeed keybindings.
    (define-key elfeed-search-mode-map "y" #'elfeed-youtube-stream)

    :bind
    ("C-c f" . elfeed-and-update))
#+END_SRC

** =emms=
Emacs Multi Media System; just a way to play some ambient music while working. 
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (emms-all)
    (emms-default-players)

    (setq emms-source-file-default-directory "~/music/"))
#+END_SRC

** =eshell=
The emacs shell, cool for running some commands. Not ideal for heavy cli work but you usually don't need that with Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure t
    :bind
    ("C-c e" . eshell))
#+END_SRC

** =haskell-mode=
Useful repl-interaction for Haskell and a bunch of other things.
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (eval-after-load 'haskell-mode '(progn
				      (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
				      (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch))))
#+END_SRC

** =ido= and =smex=
Builtin completion; we download the extra packages =smex=  for =M-x= completion and =ido-completing-read+= to have IDO completion in places that the stardard IDO does not cover (such as the =bookmark-jump= function).
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-eveywhere t)
  (ido-mode 1)

  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))

  (use-package ido-completing-read+
    :ensure t
    :init
    (ido-ubiquitous-mode 1))
#+END_SRC

** =ivy=, =counsel= and =swiper=
A trinity of minibuffer utility.
#+BEGIN_SRC
  (use-package ivy
    :ensure t
    :config
    (setq ivy-recursive-minibuffer t)
    (setq ivy-use-selectable-prompt t)
    :init
    (ivy-mode 1))

  (use-package counsel
    :ensure t
    :bind
    ("C-x C-b" . counsel-switch-buffer-other-window)
    :init
    (counsel-mode 1))

  (use-package swiper
    :bind
    ("C-s" . swiper)
    :ensure t)
#+END_SRC

** Latex
The best document preparation system with the most painful syntax of all.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+END_SRC

** =magit=
The comfiest way to use =git=.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c g") #'magit-status))
#+END_SRC

** Modeline
# Since I'm basically copying everything from [[https://github.com/snackon/Witchmacs][Witchmacs]] we shall combine =powerline= and =spaceline=.
#+BEGIN_SRC
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote wave))
    ;; (setq powerline-height 25)
    (spaceline-spacemacs-theme)

    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-line-on)

    (spaceline-helm-mode))
#+END_SRC

** =pdf-tools=
Pdfs are everywhere and being able to work with them within Emacs is fantastic.
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install))
#+END_SRC

** =rainbow-mode=
This sometimes is really useful.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+END_SRC

** =which-key=
Maybe useful if you forget your keybindings often (that is unlikely to happen through) but surprisingly useful for discovering things you would have never thought existed ().
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Org-mode
It's as awesome as people say.
#+BEGIN_SRC emacs-lisp
  (require 'org)

  (setq org-directory "~/org")

  (add-hook 'org-mode-hook '(lambda ()
			      (visual-line-mode 1)
			      (flyspell-mode)))

  (global-set-key (kbd "C-c a")   #'(lambda ()
				      (interactive)
				      (org-agenda nil "a")
				      (org-agenda-day-view)))
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-default-inbox-file    "~/org/Inbox.org"
	org-default-incubate-file "~/org/Incubate.org"
	org-default-tasks-file    "~/org/Tasks.org"
	org-default-martin-file   "~/org/Martin.org"
	org-default-media-file    "~/org/Media.org")

  (setq org-agenda-files (list org-default-tasks-file
			       org-default-martin-file))

  (setq org-log-done 'time)

  (setq org-capture-templates `(("i" "Inbox entry"        entry
				 (file ,org-default-inbox-file)
				 "* %?\n%i"
				 :empty-lines 1)))

  (setq org-refile-use-outline-path        'file
	org-outline-path-complete-in-steps nil)

  (setq org-refile-targets '((org-default-incubate-file :level . 0)
			     (org-default-tasks-file :level . 0)))

  (setq org-agenda-skip-scheduled-if-done t
	org-agenda-todo-ignore-scheduled  'future)
#+END_SRC

A better (faster) way to mark headers in =Inbox.org= as TODO tomorrow and move them to =Tasks.org=.
#+BEGIN_SRC emacs-lisp
  (defun refile-to (file heading)
    "Refile current heading to `file` `header`."
    (let ((pos (save-excursion
		 (find-file file)
		 (org-find-exact-headline-in-buffer heading))))
      (org-refile nil nil (list heading file nil pos))))

  (defun org-todo-and-tomorrow ()
    "Mark the entry at point as TODO, set a deadline for tomorrow and move it to the Task.org file."
    (interactive)
    (org-mark-ring-push)
    (org-todo)
    (org-deadline t "+1d")
    (refile-to org-default-tasks-file "Tasks")
    (org-mark-ring-goto))

  (define-key org-mode-map (kbd "C-c t") #'org-todo-and-tomorrow)
#+END_SRC

Some useful bindings that make bookkeeping easier.
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-<right>") #'org-increase-number-at-point)
  (define-key org-mode-map (kbd "C-<left>")  #'org-decrease-number-at-point)
#+END_SRC
